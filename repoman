#!/bin/bash
#
# Repoman
# A tool to manage your ArchLinux repository
#
# Copyright (C) 2008 Andrea Scarpino <bash.lnx@gmail.com>
#                    Dario Vilardi <dax@deelab.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

export TEXTDOMAIN='repoman'
export TEXTDOMAINDIR='/usr/share/locale'

color(){
  if [ "$NOCOLOR" != "TRUE" ]; then
    DEFA="\033[1;0m"
    BOLD="\033[1;1m"
    LRED="\033[1;31m"
    LGRE="\033[1;32m"
    YELL="\033[1;33m"
  else
    NOCOLOR_FLAG="--nocolor"
  fi
}

print_tar_error(){
  printf "${LRED}$(gettext "Extraction failed. Skip.\n")${DEFA}"
  skip_pkg $1
}

print_makepkg_error(){
  printf "${LRED}$(gettext "Makepkg failed. Skip.\n")${DEFA}"
}

get_file(){
  mv "$workspace/$1" "$workspace/$1.old" &> /dev/null
  if [ "$LOCAL" != "TRUE" ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      wget -P "$workspace" "$url/$1"
    else
      wget -P "$workspace" "$url/$1" &> /dev/null
    fi
  else
    cp "$url/$repo.db.tar.gz" "$workspace/" || exit 1
  fi
  if [ -f "$workspace/$1" ]; then
    printf "${LGRE}$1 ${DEFA}"
  else
    printf "${LRED}$(gettext "Cannot get %s. Exiting...\n")${DEFA}" "$1"
    exit 1
  fi
}

get_pkg(){
  if [ "$VERBOSE" = "TRUE" ]; then
    wget -P "$workspace/pkgs" http://aur.archlinux.org/packages/$1/$1.tar.gz
  else
    wget -P "$workspace/pkgs" http://aur.archlinux.org/packages/$1/$1.tar.gz &> /dev/null
  fi
  if [ -f "$workspace/pkgs/$1.tar.gz" ]; then
    printf "${LGRE}$1 ${DEFA}"
  else
    printf "${LRED}$(gettext "Cannot get %s. Skip.\n")${DEFA}" "$1"
    skip_pkg $1
  fi
}

extract_pkg(){
  for pkg in ${pkgs[@]}; do
    printf "$pkg "
    rm -rf "$workspace/pkgs/$pkg"
    if [ "$VERBOSE" = "TRUE" ]; then
      tar -xf "$workspace/pkgs/$pkg.tar.gz" -C "$workspace/pkgs" || print_tar_error $pkg
    else
      tar -xf "$workspace/pkgs/$pkg.tar.gz" -C "$workspace/pkgs" &> /dev/null || print_tar_error $pkg
    fi
  done
}

check_files(){
  if [ ! -d "$workspace" ]; then
    mkdir "$workspace" || exit 1
  fi
  
  if [ ! -d "$workspace/pkgs" ]; then
    mkdir "$workspace/pkgs" || exit 1
  fi
  
  if [ "$NOCHANGELOG" != "TRUE" ] && [ ! -f "$workspace/$changelog" ]; then
    touch "$workspace/$changelog"
  fi
}

function is_newer()
{
  unset pkgver pkgrel rpkgver rpkgrel
  pkgver=( $(echo $1 | awk -F"-" '{print $1}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  pkgrel=( $(echo $1 | awk -F"-" '{print $2}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  rpkgver=( $(echo $2 | awk -F"-" '{print $1}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  rpkgrel=( $(echo $2 | awk -F"-" '{print $2}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  if [ $pkgver -gt $rpkgver ]; then
    return 0
  fi
  if [ $pkgver -eq $rpkgver ]; then
    if [ $pkgrel -gt $rpkgrel ]; then
      return 0
    fi
  fi
  return 1
}

function pkgs_version()
{
  cd "$workspace/pkgs/$pkg/"
  if [ "$VERBOSE" = "TRUE" ]; then
    printf "\n"
    makepkg -o --noconfirm $ROOT_FLAG $NOCOLOR_FLAG
  else 
    makepkg -o --noconfirm $ROOT_FLAG $NOCOLOR_FLAG &> /dev/null
  fi
  source ./PKGBUILD
  pkgsver[${#pkgsver[@]}]=$pkgver-$pkgrel
}

skip_pkg(){
  for i in ${!pkgs[@]}; do
    if [ "${pkgs[$i]}" = "$1" ]; then
      pkgs[$i]=""
      pkgsver[$i]=""
    fi
  done
}

build_pkgs(){
  INDEX=0
  for pkg in ${pkgs[@]}; do
    if [ "$EDIT" = "TRUE" ]; then
      edit_pkgbuild $pkg
      source ./PKGBUILD
      pkgsver[$INDEX]=$pkgver-$pkgrel
    fi
    printf "$pkg (${pkgsver[$INDEX]})${DEFA}: "
    package=`tar -tf "$workspace/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g' | grep '^'$pkg'-[0-9]$*'`
    repopkgver=`echo $package | rev | cut -d'-' -f2 | rev`-`echo $package | rev | cut -d'-' -f1 | rev`
    [ "$repopkgver" = "-" ] && repopkgver=0-0
    if `is_newer ${pkgsver[$INDEX]} $repopkgver`; then
      if [ ! -f "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" ] || [ "$NOBUILD" != "TRUE" ]; then
        cd "$workspace/pkgs/$pkg"
        if [ "$VERBOSE" = "TRUE" ]; then
          printf "\n"
          makepkg -f --noconfirm $ROOT_FLAG $NOCOLOR_FLAG || print_makepkg_error
        else
          makepkg -f --noconfirm $ROOT_FLAG $NOCOLOR_FLAG &> /dev/null || print_makepkg_error
        fi
        cp "$workspace/pkgs/$pkg/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" &> /dev/null
        if [ -f "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" ]; then
          printf "${LGRE}$(gettext "done")${DEFA}"
          (( UPDATED ++ ))
        else
          skip_pkg $pkg
        fi
      else
        printf "${LGRE}$(gettext "done, already built")${DEFA}"
        (( UPDATED++ ))
      fi
    else
      printf "${YELL}$(gettext "skip, already up-to-date")${DEFA}"
      skip_pkg $pkg
    fi
    (( INDEX++ ))
    printf "\n"
  done
}

add_pkg(){
  if [ "$VERBOSE" = "TRUE" ]; then
    printf "\n"
    repo-add "$workspace/$repo.db.tar.gz" "$workspace/$1-$2-$arch.pkg.tar.gz" || return 1
  else
    repo-add "$workspace/$repo.db.tar.gz" "$workspace/$1-$2-$arch.pkg.tar.gz" &> /dev/null || return 1
  fi
}

remove_pkg(){
  if [ "$VERBOSE" = "TRUE" ]; then
    printf "\n"
    repo-remove "$workspace/$repo.db.tar.gz" $1 || return 1
  else
    repo-remove "$workspace/$repo.db.tar.gz" $1 &> /dev/null || return 1
  fi
}

update_db(){
  printf "${YELL}$(gettext "Updating: ")${DEFA}$repo.db.tar.gz\n"
  if [ "$ADD" = "TRUE" ]; then
    INDEX=0
    for pkg in ${pkgs[@]}; do
      if `add_pkg $pkg ${pkgsver[$INDEX]}`; then
        printf "$pkg ${LGRE}$(gettext "added!\n")${DEFA}"
      else
        printf "${LRED}$(gettext "Cannot add %s to repository. Skip.\n")${DEFA}" "$pkg"
      fi
      (( INDEX++ ))
    done
  elif [ "$REMOVE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if `remove_pkg $pkg`; then
        printf "$pkg ${LGRE}$(gettext "removed!\n")${DEFA}"
      else
        printf "${LRED}$(gettext "Cannot remove %s from repository. Skip.\n")${DEFA}" "$pkg"
      fi
    done
  fi
}

update_changelog(){
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    printf "${YELL}$(gettext "Updating: ")${DEFA}$changelog\n"
    rm -f /tmp/header "/tmp/$changelog"
    INDEX=0
    for pkg in ${pkgs[@]}; do
      echo "* `date +\"%d-%m-%Y %R\"` `whoami` $FLAG$pkg ${pkgsver[$INDEX]}" >> /tmp/header
      (( INDEX++ ))
    done
    cat /tmp/header "$workspace/$changelog" > "/tmp/$changelog"
    mv "/tmp/$changelog" "$workspace/$changelog"
  fi
}

usage(){
  printf "$(gettext "A tool to manage your personal ArchLinux repository\n")"
  printf "$(gettext "Usage: repoman <action> [OPTIONS] packages\n")"
  printf "\n"
  printf "$(gettext "Action:\n")"
  printf "$(gettext "  -A, --add          add or update packages to repo\n")"
  printf "$(gettext "  -R, --remove       remove packages from repo\n")"
  printf "$(gettext "      --create       create database repo, then add packages\n")"
  printf "$(gettext "      --all          update the whole repository\n")"
  printf "$(gettext "Options:\n")"
  printf "$(gettext "  -l, --local        use this for local repository\n")"
  printf "$(gettext "  -d, --devel        recompile only installated devel packages\n")"
  printf "$(gettext "  -k, --keep         do not get tarballs from AUR, use pkgs/\n")"
  printf "$(gettext "  -u, --noupload     do not upload any file to ftp\n")"
  printf "$(gettext "  -b, --nobuild      do not build packages if exist\n")"
  printf "$(gettext "  -c, --nochangelog  do not use a changelog file\n")"
  printf "$(gettext "  -e, --edit         ask for edit pkgbuild\n")"
  printf "$(gettext "  -v, --verbose      print commands output\n")"
  printf "$(gettext "      --clean        remove any files from workspace dir\n")"
  printf "$(gettext "      --nocolor      do not use any color\n")"
  printf "$(gettext "      --help         display this help and exit\n")"
}

check_args(){
  if [ "$#" -eq "0" ]; then
    usage
    exit 1
  fi

  while [ "$#" -ne "0" ]; do
    case $1 in
      --add) ADD="TRUE" ;;
      --remove) REMOVE="TRUE"; FLAG="($(gettext "REMOVED")) " ;;
      --create) CREATE="TRUE"; ADD="TRUE" ;;
      --all) ALL="TRUE"; ADD="TRUE" ;;
      --local) LOCAL="TRUE"; NOUPLOAD="TRUE" ;;
      --devel) DEVEL="TRUE"; ADD="TRUE" ;;
      --keep) KEEP="TRUE" ;;
      --noupload) NOUPLOAD="TRUE" ;;
      --nobuild) NOBUILD="TRUE" ;;
      --nochangelog) NOCHANGELOG="TRUE" ;;
      --edit) EDIT="TRUE" ;;
      --verbose) VERBOSE="TRUE" ;;
      --clean) CLEAN="TRUE" ;;
      --nocolor) NOCOLOR="TRUE" ;;
      --help) usage; exit 0 ;;
      --*) usage; exit 1 ;;
      -* )
        while getopts ":ARbcdekluv:-:" ARGS; do
          case $ARGS in
            A) ADD="TRUE" ;;
            R) REMOVE="TRUE"; FLAG="(REMOVED) " ;;
            b) NOBUILD="TRUE" ;;
            c) NOCHANGELOG="TRUE" ;;
            d) DEVEL="TRUE"; ADD="TRUE" ;;
            e) EDIT="TRUE" ;;
            k) KEEP="TRUE" ;;
            l) LOCAL="TRUE" ;;
            u) NOUPLOAD="TRUE" ;;
            v) VERBOSE="TRUE" ;;
           esac
         done ;;
        *) pkgs[${#pkgs[@]}]=$1 ;;
      esac
    shift
  done
}

edit_pkgbuild(){
  if [ -f "$workspace/pkgs/$1/PKGBUILD" ]; then
    printf "${BOLD}$(gettext "Do you want to edit %s PKGBUILD? (Y/n): ")${DEFA}" "$1"
    read EDIT_ANSWER
    if [ "$EDIT_ANSWER" != "$(gettext "n")" ]; then
      [ -z "$EDITOR" ] && EDITOR=vi
      $EDITOR "$workspace/pkgs/$1/PKGBUILD"
    fi
  fi
}

download_pkgs(){
  if [ "$ADD" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ ! -f "$workspace/pkgs/$pkg.tar.gz" ] || [ ! "$KEEP" = "TRUE" ]; then
        rm "$workspace/pkgs/$pkg.tar.gz" &> /dev/null
        get_pkg $pkg
      else
        printf "$pkg $(gettext "(found in pkgs/)\n")${DEFA}"
      fi
    done
  fi
}

print_pkgs_list(){
  for pkg in ${pkgs[@]}; do
    printf "${LGRE}$pkg ${DEFA}"
  done
}

function ask_remove()
{
  printf "${BOLD}$(gettext "Do you want to remove packages build dir? (y/N): ")${DEFA}"
  read DIR_REMOVE
  if [ "$DIR_REMOVE" = "y" ]; then
    for pkg in ${pkgs[@]}; do
      rm -rf "$workspace/pkgs/"
    done
  fi
}

clean(){
  rm -rf "$workspace/" /tmp/header "/tmp/$changelog"
  printf "${YELL}$(gettext "Any files in workspace directory have been removed!\n")${DEFA}"
}

function upload_file()
{
  if [ -f $1 ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; put $1; exit" || return 1
    else
      lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; put $1; exit" &> /dev/null || return 1
    fi
  fi
}

function remove_from_ftp()
{
  if [ "$VERBOSE" = "TRUE" ]; then
    lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; glob rm $1-*-*-$arch.pkg.tar.gz; exit" || return 1
  else
    lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; glob rm $1-*-*-$arch.pkg.tar.gz; exit" &> /dev/null || return 1
  fi
}

function upload()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    if `upload_file "$workspace/$changelog"`; then
      printf "$changelog ${LGRE}$(gettext "uploaded!\n")${DEFA}"
    else
      printf "$changelog ${LRED}$(gettext "Upload failed.\n")${DEFA}"
    fi
  fi
  
  if `upload_file "$workspace/$repo.db.tar.gz"`; then
    printf "$repo.db.tar.gz ${LGRE}$(gettext "uploaded!\n")${DEFA}"
  else
    printf "$repo.db.tar.gz ${LRED}$(gettext "Upload failed.\n")${DEFA}"
  fi
  
  INDEX=0
  for pkg in ${pkgs[@]}; do
    if [ "$REMOVE" = "TRUE" ]; then
      remove_from_ftp $pkg
      printf "$(gettext "All copy of %s have been removed from ftp!\n")" "$pkg"
    else
      remove_from_ftp $pkg
      if `upload_file "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz"`; then
        printf "$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz ${LGRE}$(gettext "uploaded!\n")${DEFA}"  
      else
        printf "$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz ${LRED}$(gettext "Upload failed.\n")${DEFA}"
      fi
    fi
    (( INDEX++ ))
  done
}

function copy_file()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    cp -f "$workspace/$changelog" "$url"
  fi
  cp -f "$workspace/$repo.db.tar.gz" "$url"
  
  INDEX=0
  for pkg in ${pkgs[@]}; do
    cp -f "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" "$url"
    (( INDEX++ ))
  done
}

get_pkgs_list(){
  if [ "$DEVEL" = "TRUE" ]; then
    for pkg in `tar -tf "$workspace/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g' | grep "\-\(svn\|cvs\|hg\|git\|bzr\|darcs\)"`; do
      pkgs[${#pkgs[@]}]=`echo $pkg | rev | cut -d'-' -f3- | rev`
      repopkgsver[${#repopkgsver[@]}]=`echo $pkg | rev | cut -d'-' -f2 | rev`
      repopkgsrel[${#repopkgsrel[@]}]=`echo $pkg | rev | cut -d'-' -f1 | rev`
    done
  else
    printf "${BOLD}$(gettext "This will update the whole repository!\n")${DEFA}"
    for pkg in `tar -tf "$workspace/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g'`; do
      pkgs[${#pkgs[@]}]=`echo $pkg | rev | cut -d'-' -f3- | rev`
      repopkgsver[${#repopkgsver[@]}]=`echo $pkg | rev | cut -d'-' -f2 | rev`
      repopkgsrel[${#repopkgsrel[@]}]=`echo $pkg | rev | cut -d'-' -f1 | rev`
    done
  fi
 
  [ ${#pkgs[@]} -eq 0 ] && exit 0
}

function main()
{
  source /etc/repoman.conf
  
  if [ "$UID" -eq 0 ]; then
    ROOT_FLAG="--asroot "
  fi
  
  check_args $@
  check_files
  color
  UPDATED=0
  
  if [ "$CLEAN" = "TRUE" ]; then
    clean
    exit 0
  fi

  if [ "$CREATE" != "TRUE" ]; then
    printf "${YELL}$(gettext "Getting: ")${DEFA}"
    if [ "$NOCHANGELOG" != "TRUE" ]; then
      get_file $changelog
    fi
    get_file $repo.db.tar.gz
    printf "\n"
  fi

  if [ "$ALL" = "TRUE" ] || [ "$DEVEL" = "TRUE" ]; then
    get_pkgs_list
  fi
  
  printf "${YELL}$(gettext "Packages: ")"
  print_pkgs_list
  printf "\n"
  
  if [ "$ADD" != "TRUE" ] && [ "$REMOVE" != "TRUE" ]; then
    printf "$(gettext "What I must do with these packages?!\n\n")"
    usage
    exit 1
  fi
  
  printf "${YELL}$(gettext "Downloading: ")${DEFA}"
  download_pkgs
  printf "\n"
  
  if [ "$ADD" = "TRUE" ]; then
    printf "${YELL}$(gettext "Extracting: ")${DEFA}"
    extract_pkg
    printf "\n"
    
    printf "${YELL}$(gettext "Getting all packages version...")${DEFA}"
    for pkg in ${pkgs[@]}; do
      pkgs_version
    done
    printf "\n"
    
    printf "${YELL}$(gettext "Building: ")${DEFA}"
    build_pkgs
  fi
  
  if [ $UPDATED -ne 0 ] || [ "$REMOVE" = "TRUE" ]; then
    update_db

    update_changelog
  
    [ "$NOUPLOAD" != "TRUE" ] && upload
  
    [ "$LOCAL" = "TRUE" ] && copy_file
  else
    printf "$(gettext "None packages added to repository\n")"
  fi
  
  [ "$ADD" = "TRUE" ] && ask_remove
}

main $@

exit 0
