#!/bin/bash
#
# Repoman
# A tool to manage your Arch Linux repository
#
# Copyright (C) 2008-2009 Andrea Scarpino <bash.lnx@gmail.com>
#                         Dario Vilardi <dax@deelab.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

export TEXTDOMAIN='repoman'
export TEXTDOMAINDIR='/usr/share/locale'

color(){
  if [ "$NOCOLOR" != "TRUE" ]; then
    DEFA="\033[1;0m"
    BOLD="\033[1;1m"
    LRED="\033[1;31m"
    LGRE="\033[1;32m"
    YELL="\033[1;33m"
  else
    NOCOLOR_FLAG="--nocolor"
  fi
}

print_addpkg_error(){
  printf "$(gettext "failed! Cannot add %s to repository.") ${LRED}$(gettext "Skip.\n")${DEFA}" "$1"
  skip_pkg $1
}

print_cannotgetfile_error(){
  printf "${LRED}$(gettext "Cannot get %s. Skip.")${DEFA}" "$1"
  if [ "$1" == "$repo.db.tar.gz" ]; then
    printf "${LRED}$(gettext "\nI cannot continue without the database repo file. Exit.\n")${DEFA}"
    exit 1
  fi
  skip_pkg $1
}

print_makepkg_error(){
  printf "${LRED}$(gettext "Makepkg failed! Skip.\n")${DEFA}"
}

print_removepkg_error(){
  printf "$(gettext "failed! Cannot remove %s from repository.") ${LRED}$(gettext "Skip.\n")${DEFA}" "$1"
  skip_pkg $1
}

print_tar_error(){
  printf "${LRED}$(gettext "Extraction failed! Skip.\n")${DEFA}"
  skip_pkg $1
}

print_upload_error(){
  printf "${LRED}$(gettext "failed! Cannot upload %s.\n")${DEFA}" "$1"
  skip_pkg $1
}

get_file(){
  printf "${LGRE}$1 ${DEFA}"
  mv "${workspace}/$1" "${workspace}/$1.old" &> /dev/null
  if [ "$LOCAL" != "TRUE" ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      wget -P "${workspace}" "$url/$1" || print_cannotgetfile_error $1
    else
      wget -P "${workspace}" "$url/$1" &> /dev/null || print_cannotgetfile_error $1
    fi
  else
    cp "$url/$repo.db.tar.gz" "${workspace}/" || exit 1
  fi
}

extract_pkg(){
  printf "$1 "
  if [ ! -f "${workspace}/pkgs/$1/PKGBUILD" ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      printf "\n"
      tar -xf "${workspace}/pkgs/$1.tar.gz" -C "${workspace}/pkgs" || print_tar_error $1
    else
      tar -xf "${workspace}/pkgs/$1.tar.gz" -C "${workspace}/pkgs" &> /dev/null || print_tar_error $1
    fi
  fi
}

get_pkg_version(){
  cd "${workspace}/pkgs/$1/"
  unset pkgver
  unset pkgrel
  source ./PKGBUILD
  is_dev=`echo $1 | sed -e 's:\/$::g' | grep "\-\(svn\|cvs\|hg\|git\|bzr\|darcs\)"`
  if [ ${#is_dev} -gt "0" ]; then
    #makepkg -o --noconfirm $ROOT_FLAG $NOCOLOR_FLAG &> /dev/null
    # temporarily. ever build devel packages
    pkgver=0
  fi
  pkgsver[${#pkgsver[@]}]="$pkgver-$pkgrel"
}

skip_pkg(){
  for i in ${!pkgs[@]}; do
    if [ "${pkgs[$i]}" = "$1" ]; then
      pkgs[$i]=""
      pkgsver[$i]=""
    fi
  done
}

build_pkg(){
  if [ "$EDIT" = "TRUE" ]; then
    edit_pkgbuild $1
    source ./PKGBUILD
    pkgsver[$INDEX]=$pkgver-$pkgrel
  fi
  printf "$1 "
  is_dev=`echo $1 | sed -e 's:\/$::g' | grep "\-\(svn\|cvs\|hg\|git\|bzr\|darcs\)"`
  if [ ${#is_dev} -eq "0" ]; then
    printf "(${pkgsver[$INDEX]})${DEFA}: "
  fi
  local package=`tar -tf "${workspace}/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g' | grep '^'$1'-[0-9]$*'`
  local repopkgver=`echo $package | rev | cut -d'-' -f2 | rev`-`echo $package | rev | cut -d'-' -f1 | rev`
  # if the package isn't on the repo set repopkgver to 0
  [ "$repopkgver" = "-" ] && repopkgver=0-0
  if `is_x_gt_y ${pkgsver[$INDEX]} $repopkgver` || [ "$FORCE" = "TRUE" ] || [ ${#is_dev} -gt "0" ]; then
    if [ ! -f "${workspace}/$1-${pkgsver[$INDEX]}-$arch.pkg.tar.gz"  -o "$NOBUILD" != "TRUE" ]; then
      cd "${workspace}/pkgs/$1"
      if [ "$VERBOSE" = "TRUE" ]; then
        printf "\n"
        makepkg -f --noconfirm $ROOT_FLAG $NOCOLOR_FLAG || print_makepkg_error
      else
        makepkg -f --noconfirm $ROOT_FLAG $NOCOLOR_FLAG &> /dev/null || print_makepkg_error
      fi
      if [ ${#is_dev} -gt "0" ]; then
        source ./PKGBUILD
        pkgsver[$INDEX]=$pkgver-$pkgrel
      fi
      if [ -f "${workspace}/pkgs/$1/$1-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" ]; then
        cp "${workspace}/pkgs/$1/$1-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" "${workspace}/"
        printf "${LGRE}$(gettext "done")${DEFA}"
        (( UPDATED ++ ))
      else
        skip_pkg $1
      fi
    else
      printf "${LGRE}$(gettext "done, already built")${DEFA}"
      (( UPDATED++ ))
    fi
  else
    printf "${YELL}$(gettext "skip, already up-to-date")${DEFA}"
    skip_pkg $1
  fi
}

add_pkg(){
  printf "Adding $1 $2 to $repo...\n"
  if [ "$VERBOSE" = "TRUE" ]; then
    repo-add "${workspace}/$repo.db.tar.gz" "${workspace}/$1-$2-$arch.pkg.tar.gz" || print_addpkg_error $1
  else
    repo-add "${workspace}/$repo.db.tar.gz" "${workspace}/$1-$2-$arch.pkg.tar.gz" &> /dev/null || print_addpkg_error $1
  fi
  return 0
}

remove_pkg(){
  if [ "$VERBOSE" = "TRUE" ]; then
    printf "\n"
    repo-remove "${workspace}/$repo.db.tar.gz" $1 || print_removepkg_error $1
  else
    repo-remove "${workspace}/$repo.db.tar.gz" $1 &> /dev/null || print_removepkg_error $1
  fi
  return 0
}

update(){
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    printf "$changelog "
    rm -f /tmp/header "/tmp/$changelog"
    INDEX=0
    for pkg in ${pkgs[@]}; do
      echo "* `date +\"%d-%m-%Y %R\"` `whoami` $FLAG$pkg ${pkgsver[$INDEX]}" >> /tmp/header
      (( INDEX++ ))
    done
    cat /tmp/header "${workspace}/$changelog" > "/tmp/$changelog"
    mv "/tmp/$changelog" "${workspace}/$changelog"
  fi
    
  printf "$repo.db.tar.gz\n"
  if [ "$ADD" = "TRUE" ]; then
    INDEX=0
    for pkg in ${pkgs[@]}; do
      add_pkg $pkg ${pkgsver[$INDEX]} || print_addpkg_error $pkg
      (( INDEX++ ))
    done
  elif [ "$REMOVE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      remove_pkg $pkg || print_removepkg_error $pkg
      printf "$pkg ${LGRE}$(gettext "removed!\n")${DEFA}"
    done
  fi
}

usage(){
  printf "$(gettext "A tool to manage your personal Arch Linux repository\n")"
  printf "$(gettext "Usage: repoman <action>|<flag> [OPTIONS] packages\n")"
  printf "\n"
  printf "$(gettext "Action:\n")"
  printf "$(gettext "  -A, --add          add or update packages on repository\n")"
  printf "$(gettext "  -R, --remove       remove packages from repository\n")"
  printf "$(gettext "      --create       create a new database, then add packages\n")"
  printf "$(gettext "Flag:\n")"
  printf "$(gettext "      --all          update the whole repository\n")"
  printf "$(gettext "  -d, --devel        rebuild only devel packages on repository\n")"
  printf "$(gettext "Options:\n")"
  printf "$(gettext "  -l, --local        use this for local (non-ftp) repository\n")"
  printf "$(gettext "  -f, --force        build packages if already up-to-date on repo\n")"
  printf "$(gettext "  -k, --keep         do not get tarballs from AUR, use local in pkgs/\n")"
  printf "$(gettext "  -u, --noupload     do not upload any file to ftp\n")"
  printf "$(gettext "  -b, --nobuild      do not build packages if exist in workspace dir\n")"
  printf "$(gettext "  -c, --nochangelog  do not use a changelog file\n")"
  printf "$(gettext "  -o, --noconfirm    do not ask\n")"
  printf "$(gettext "  -e, --edit         ask to edit pkgbuild for each package\n")"
  printf "$(gettext "  -v, --verbose      more verbose, print commands output\n")"
  printf "$(gettext "      --clean        remove any files from workspace dir\n")"
  printf "$(gettext "      --nocolor      do not use any color\n")"
  printf "$(gettext "      --help         display this help and exit\n")"
}

check_args(){
  ADD="FALSE"
  REMOVE="FALSE"
  CREATE="FALSE"
  ALL="FALSE"
  LOCAL="FALSE"
  DEVEL="FALSE"
  FORCE="FALSE"
  KEEP="FALSE"
  NOUPLOAD="FALSE"
  NOBUILD="FALSE"
  NOCHANGELOG="FALSE"
  NOCOLOR="FALSE"
  NOCONFIRM="FALSE"
  EDIT="FALSE"
  VERBOSE="FALSE"
  
  if [ -f ~/.repomanrc ]; then
	configfile="$HOME/.repoman.conf"
  else
	configfile="/etc/repoman.conf"
  fi
  source $configfile
  
  if [ "$#" -eq "0" ]; then
    usage
    exit 1
  fi

  while [ "$#" -ne "0" ]; do
    case $1 in
      --add) ADD="TRUE" ;;
      --remove) REMOVE="TRUE"; FLAG="($(gettext "REMOVED")) " ;;
      --create) CREATE="TRUE"; ADD="TRUE" ;;
      --all) ALL="TRUE"; ADD="TRUE" ;;
      --local) LOCAL="TRUE"; NOUPLOAD="TRUE" ;;
      --devel) DEVEL="TRUE"; ADD="TRUE" ;;
      --force) FORCE="TRUE" ;;
      --keep) KEEP="TRUE" ;;
      --noupload) NOUPLOAD="TRUE" ;;
      --nobuild) NOBUILD="TRUE" ;;
      --nochangelog) NOCHANGELOG="TRUE" ;;
      --nocolor) NOCOLOR="TRUE" ;;
      --noconfirm) NOCONFIRM="TRUE" ;;
      --edit) EDIT="TRUE" ;;
      --verbose) VERBOSE="TRUE" ;;
      --clean) clean; exit 0 ;;
      --help) usage; exit 0 ;;
      --*) usage; exit 1 ;;
      -* )
        while getopts ":ARd:bcefklouv:" ARGS; do
          case $ARGS in
            A) ADD="TRUE" ;;
            R) REMOVE="TRUE"; FLAG="(REMOVED) " ;;
            b) NOBUILD="TRUE" ;;
            c) NOCHANGELOG="TRUE" ;;
            d) DEVEL="TRUE"; ADD="TRUE" ;;
            e) EDIT="TRUE" ;;
            f) FORCE="TRUE" ;;
            k) KEEP="TRUE" ;;
            l) LOCAL="TRUE" ;;
            o) NOCONFIRM="TRUE" ;;
            u) NOUPLOAD="TRUE" ;;
            v) VERBOSE="TRUE" ;;
           esac
         done ;;
        *) pkgs[${#pkgs[@]}]=$1 ;;
      esac
    shift
  done
}

edit_pkgbuild(){
  if [ -f "${workspace}/pkgs/$1/PKGBUILD" ]; then
    printf "${BOLD}$(gettext "Do you want to edit %s PKGBUILD? (Y/n): ")${DEFA}" "$1"
    read EDIT_ANSWER
    if [ "$EDIT_ANSWER" != "$(gettext "n")" ]; then
      [ -z "$EDITOR" ] && EDITOR=vi
      $EDITOR "${workspace}/pkgs/$1/PKGBUILD"
    fi
  fi
}

get_pkgbuild(){
  printf "${LGRE}$1 ${DEFA}"
  if [ "$KEEP" != "TRUE" ]; then
    rm -rf "${workspace}/pkgs/$1.tar.gz" "${workspace}/pkgs/$1" &> /dev/null
    get_pkg_repo $1
    if [ "$pkg_repo" != "aur" ]; then
      [ "$pkg_repo" == "community" ] && pkg_repo=$pkg_repo/`get_community_category $1`
      if [ "$VERBOSE" = "TRUE" ]; then
        printf "\n"
        rsync -mrtv --no-motd --delete-after --delete-excluded rsync.archlinux.org::abs/`uname -m`/$pkg_repo/$1 "${workspace}/pkgs"
      else
        rsync -mrtv --no-motd --delete-after --delete-excluded rsync.archlinux.org::abs/`uname -m`/$pkg_repo/$1 "${workspace}/pkgs" &> /dev/null
      fi
      printf "\n"
    elif [ "$pkg_repo" == "aur" ]; then
      get_pkg_from_aur $1
    fi
  elif [ -f "${workspace}/pkgs/$1/PKGBUILD" ]; then
    printf "$(gettext "(PKGBUILD found in pkgs/ dir)\n")${DEFA}"
  else
    printf "$(gettext "PKGBUILD not found. Skip\n")${DEFA}"
    skip_pkg $1
  fi
}

get_pkg_from_aur(){
  if [ "$VERBOSE" = "TRUE" ]; then
    printf "\n"
    wget -P "${workspace}/pkgs" http://aur.archlinux.org/packages/$1/$1.tar.gz || print_cannotgetfile_error $1
  else
    wget -P "${workspace}/pkgs" http://aur.archlinux.org/packages/$1/$1.tar.gz &> /dev/null || print_cannotgetfile_error $1
  fi
}

print_pkgs_list(){
  for pkg in ${pkgs[@]}; do
    printf "${LGRE}$pkg ${DEFA}"
  done
}

ask_remove(){
  printf "${BOLD}$(gettext "Do you want to clean packages build dirs? (y/N): ")${DEFA}"
  read DIR_REMOVE
  if [ "$DIR_REMOVE" = "y" ]; then
    rm -rf ${workspace}/pkgs/*/{pkg,src,*.pkg.tar.gz}
  fi
}

clean(){
  rm -rf "${workspace}/" /tmp/header "/tmp/$changelog"
  printf "${BOLD}$(gettext "Any files in workspace directory have been removed!\n")${DEFA}"
}

upload_file(){
  if [ -f "${workspace}/$1" ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      ncftpput -u $username -p $password $ftp_url /$ftp_dir "${workspace}/$1" || print_upload_error $1
      #lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; put ${workspace}/$1; exit" || print_upload_error $1
    else
      ncftpput -u $username -p $password $ftp_url /$ftp_dir "${workspace}/$1" &> /dev/null || print_upload_error $1
      #lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; put ${workspace}/$1; exit" &> /dev/null || print_upload_error $1
    fi
  fi
  return 0
}

remove_from_ftp(){
  if [ "$VERBOSE" = "TRUE" ]; then
    ncftpput -u $username -p $password $ftp_url /$ftp_dir -W "rm -f $1-*-$arch.pkg.tar.gz" || print_upload_error $1
    #lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; glob rm -f $1-*-*-$arch.pkg.tar.gz; exit" || return 1
  else
    ncftpput -u $username -p $password $ftp_url /$ftp_dir -W "rm -f $1-*-$arch.pkg.tar.gz" &> /dev/null || print_upload_error $1
    #lftp -u "$username,$password" "$ftp_url/$ftp_dir" -e "set ftp:ssl-protect-data true; glob rm -f $1-*-*-$arch.pkg.tar.gz; exit" &> /dev/null || return 1
  fi
}

upload(){
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    printf "Uploading $changelog..."
    upload_file $changelog || print_upload_error $changelog
    printf "\n"
  fi
  
  printf "Uploading $repo.db.tar.gz..."
  upload_file $repo.db.tar.gz || print_upload_error $repo.db.tar.gz
  printf "\n"
  
  #remove_from_ftp $pkg
  if [ "$ADD" = "TRUE" ]; then
    INDEX=0
    for pkg in ${pkgs[@]}; do
      printf "Uploading $pkg ${pkgsver[$INDEX]}..."
      upload_file $pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz || print_upload_error $pkg-${pkgsver[$INDEX]}
      printf "\n"
      (( INDEX++ ))
    done
  elif [ "$REMOVE" = "TRUE" ]; then
    printf "$(gettext "All copy of %s have been removed from ftp!\n")" "$pkg"
  fi
}

copy_files(){
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    cp -f "${workspace}/$changelog" "$url/"
  fi
  cp -f "${workspace}/$repo.db.tar.gz" "$url/"
  
  INDEX=0
  for pkg in ${pkgs[@]}; do
    cp -f "${workspace}/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" "$url/"
    (( INDEX++ ))
  done
}

get_pkgs_list(){
  if [ "$DEVEL" = "TRUE" ]; then
    for pkg in `tar -tf "${workspace}/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g' | grep "\-\(svn\|cvs\|hg\|git\|bzr\|darcs\)"`; do
      pkgs[${#pkgs[@]}]=`echo $pkg | rev | cut -d'-' -f3- | rev`
      repopkgsver[${#repopkgsver[@]}]=`echo $pkg | rev | cut -d'-' -f2 | rev`
      repopkgsrel[${#repopkgsrel[@]}]=`echo $pkg | rev | cut -d'-' -f1 | rev`
    done
  else
    printf "${BOLD}$(gettext "This will update the whole repository!\n")${DEFA}"
    for pkg in `tar -tf "${workspace}/$repo.db.tar.gz" | grep -vE 'desc$|depends$' | sed -e 's:\/$::g'`; do
      pkgs[${#pkgs[@]}]=`echo $pkg | rev | cut -d'-' -f3- | rev`
      repopkgsver[${#repopkgsver[@]}]=`echo $pkg | rev | cut -d'-' -f2 | rev`
      repopkgsrel[${#repopkgsrel[@]}]=`echo $pkg | rev | cut -d'-' -f1 | rev`
    done
  fi
 
  [ "${#pkgs[@]}" -eq "0" ] && exit 0
}

main(){
  source /usr/lib/repoman/basicfunctions.sh || exit 1
  
  [ "$UID" -eq 0 ] && ROOT_FLAG="--asroot "
  
  check_args $@
  check_files
  color
  UPDATED=0
  
  if [ "$CREATE" != "TRUE" ]; then
    printf "${YELL}$(gettext "Getting: ")${DEFA}"
    if [ "$NOCHANGELOG" != "TRUE" ]; then
      get_file $changelog
    fi
    get_file $repo.db.tar.gz
    printf "\n"
  fi

  if [ "$ALL" = "TRUE" -o "$DEVEL" = "TRUE" ]; then
    get_pkgs_list
  fi
  
  if [ "${#pkgs[@]}" -gt "0" ]; then
    printf "${YELL}$(gettext "Packages: ")"
    print_pkgs_list
    printf "\n"
  else
    exit 0
  fi
  
  if [ "$ADD" != "TRUE"  -a "$REMOVE" != "TRUE" ]; then
    printf "$(gettext "What I must do with these packages?!\n\n")"
    usage
    exit 1
  fi
  
  if [ "$ADD" = "TRUE" ]; then
    printf "${YELL}$(gettext "Downloading: ")${DEFA}"
    for pkg in ${pkgs[@]}; do
      get_pkgbuild $pkg
    done
    printf "\n"
    
    if [ "$KEEP" != "TRUE" ]; then
      printf "${YELL}$(gettext "Extracting: ")${DEFA}"
      for pkg in ${pkgs[@]}; do
        extract_pkg $pkg
      done
      printf "\n"
    fi
    
    printf "${YELL}$(gettext "Getting all packages version...")${DEFA}"
    for pkg in ${pkgs[@]}; do
      get_pkg_version $pkg
    done
    printf "\n"
    
    printf "${YELL}$(gettext "Building: ")${DEFA}"
    INDEX=0
    for pkg in ${pkgs[@]}; do
      build_pkg $pkg
      (( INDEX++ ))
      printf "\n"
    done
  fi
  
  if [ "$UPDATED" -ne "0" -o "$REMOVE" = "TRUE" ]; then
    printf "${YELL}$(gettext "Updating: ")${DEFA}"
    update
    if [ "$NOUPLOAD" != "TRUE" ]; then
      upload
    elif [ "$LOCAL" = "TRUE" ]; then
      copy_files
    fi
  else
    printf "$(gettext "None packages added to repository\n")"
    exit 0
  fi
  
  if [ "$NOCONFIRM" != "TRUE" ]; then
    [ "$ADD" = "TRUE" ] && ask_remove    
  fi
}

main $@

exit 0
