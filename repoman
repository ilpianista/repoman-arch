#!/bin/bash
#
# Repoman
# A tool to manage your ArchLinux repository
#
# Copyright (C) 2008 Andrea Scarpino <bash.lnx@gmail.com>
#                    Dario Vilardi <dax@deelab.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

export TEXTDOMAIN='repoman'
export TEXTDOMAINDIR='/usr/share/locale'

function color()
{
  if [ "$NOCOLOR" != "TRUE" ]; then
    DEFA="\033[1;0m"
    BOLD="\033[1;1m"
    LRED="\033[1;31m"
    LGRE="\033[1;32m"
    YELL="\033[1;33m"
  else
    NOCOLOR_FLAG="--nocolor"
  fi
}

function print_wget_error()
{
  if [ "$1" = "$changelog" ] || [ "$1" = "$repo.db.tar.gz" ]; then
    printf "\n${LRED}$(gettext "I cannot get %s. Exiting.") ${DEFA}\n" "$1"
    exit 1
  else
    printf "\n${LRED}$(gettext "I cannot get %s. Skip.") ${DEFA}\n" "$1"
    skip_pkg $2
  fi
}

function print_tar_error()
{
  printf "\n${LRED}$(gettext "I cannot extract %s. Skip.") ${DEFA}\n" "$1"
  skip_pkg $2
}

function print_makepkg_error()
{
  printf "\n${LRED}$(gettext "%s: Makepkg fail. Skip.") ${DEFA}\n" "$1"
  skip_pkg $2
}

function print_upload_error()
{
  if [ "$1" = "$changelog" ] || [ "$1" = "$repo.db.tar.gz" ]; then
    printf "\n${LRED}$(gettext "Upload of %s fail. Exiting.") ${DEFA}\n" "$1"
    exit 1
  else
    printf "\n${LRED}$(gettext "Upload of %s fail. Skip.") ${DEFA}\n" "$1"
    skip_pkg $2
  fi
}

function print_add_error()
{
  printf "\n${LRED}$(gettext "I cannot add %s to repository. Skip.") ${DEFA}\n" "$1"
  skip_pkg $2
}

function print_remove_error()
{
  printf "\n${LRED}$(gettext "I cannot remove %s from repository. Skip.") ${DEFA}\n" "$1"
  skip_pkg $2
}

function get_file()
{
  printf "${LGRE} $1\n${DEFA}"
  mv $workspace/$1 $workspace/$1.old &> /dev/null
  if [ "$VERBOSE" = "TRUE" ]; then
    wget -P $workspace $url/$1 || print_wget_error $1
  else
    wget -P $workspace $url/$1 &> /dev/null || print_wget_error $1
  fi
}

function get_pkg()
{
  printf "${LGRE} $1.tar.gz\n${DEFA}"
  if [ "$VERBOSE" = "TRUE" ]; then
    wget -P $workspace/pkgs http://aur.archlinux.org/packages/$1/$1.tar.gz || print_wget_error $1
  else
    wget -P $workspace/pkgs http://aur.archlinux.org/packages/$1/$1.tar.gz &> /dev/null || print_wget_error $1
  fi
}

function extract()
{
  for pkg in ${pkgs[@]}; do
    printf " ${LGRE}$pkg \n${DEFA}"
    rm -rf $workspace/pkgs/$pkg
    if [ "$VERBOSE" = "TRUE" ]; then
      tar -xf $workspace/pkgs/$pkg.tar.gz -C $workspace/pkgs || print_tar_error $pkg
    else
      tar -xf $workspace/pkgs/$pkg.tar.gz -C $workspace/pkgs &> /dev/null || print_tar_error $pkg
    fi
  done
}

function check_files()
{
  if [ ! -d $workspace ]; then
    mkdir $workspace || exit 1
  fi
  
  if [ ! -d $workspace/pkgs ]; then
    mkdir $workspace/pkgs || exit 1
  fi
  
  if [ "$NOCHANGELOG" != "TRUE" ] && [ ! -f "$workspace/$changelog" ]; then
    touch $workspace/$changelog
  fi
}

function is_newer()
{
  unset pkgver pkgrel rpkgver rpkgrel
  pkgver=( $(echo $1 | awk -F"-" '{print $1}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  pkgrel=( $(echo $1 | awk -F"-" '{print $2}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  rpkgver=( $(echo $2 | awk -F"-" '{print $1}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  rpkgrel=( $(echo $2 | awk -F"-" '{print $2}' | tr "[:punct:]" "\ " | sed 's/[a-zA-Z]/ &/g'))
  if [ $pkgver -gt $rpkgver ]; then
    return 0
  fi
  if [ $pkgver -eq $rpkgver ]; then
    if [ $pkgrel -gt $rpkgrel ]; then
      return 0
    fi
  fi
  return 1
}

function pkgs_version()
{
  for pkg in ${pkgs[@]}; do
  cd $workspace/pkgs/$pkg/
    if [ "$VERBOSE" = "TRUE" ]; then
      printf "\n"
      makepkg -o --noconfirm $USE_ROOT $NOCOLOR_FLAG || print_makepkg_error $pkg
    else
      makepkg -o --noconfirm $USE_ROOT $NOCOLOR_FLAG &> /dev/null || print_makepkg_error $pkg
    fi
    source ./PKGBUILD
    pkgsver[${#pkgsver[@]}]=$pkgver-$pkgrel
  done
}

function skip_pkg()
{
  for i in ${!pkgs[@]}; do
    if [ "${pkgs[$i]}" = "$1" ]; then
      for (( j=$i; j<${#pkgs[@]}; j++)); do
        pkgs[$j]=${pkgs[$j+1]}
        pkgsver[$j]=${pkgsver[$j+1]}
      done
    fi
  done
  pkgs[$i]=""
  pkgsver[$i]=""
}

function build_pkg()
{
  INDEX=0
  for pkg in ${pkgs[@]}; do
    printf "${LGRE} $pkg"
    cd $workspace/pkgs/$pkg
    if [ "$EDIT" = "TRUE" ]; then
      edit_pkgbuild $pkg
    fi
    repopkgver=`LC_ALL=C pacman -Si $repo/$pkg | grep Version | awk -F": " '{print $2}' 2> /dev/null`
    if `is_newer ${pkgsver[$INDEX]} $repopkgver`; then
      if [ ! -f "$workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz" ] || [ "$NOBUILD" != "TRUE" ]; then
        if [ "$VERBOSE" = "TRUE" ]; then
          printf "\n"
          makepkg -f --noconfirm $USE_ROOT $NOCOLOR_FLAG || print_makepkg_error $pkg
        else
          makepkg -f --noconfirm $USE_ROOT $NOCOLOR_FLAG &> /dev/null || print_makepkg_error $pkg
        fi
        cp -f $workspace/pkgs/$pkg/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz $workspace/ || exit 1
      else
        printf " ${YELL}$(gettext "skip, exist")${DEFA}"
      fi
      printf " ${LGRE}($pkgver-$pkgrel)${DEFA}\n"
      (( UPDATED++ ))
    else
      printf " ${YELL}$(gettext "skip, already up-to-date\n")${DEFA}"
      skip_pkg $pkg
    fi
  done
}

function update_db()
{
  printf "${YELL}$(gettext "Updating:") ${LGRE}$repo.db.tar.gz${DEFA}\n"
  if [ "$ADD" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ "$VERBOSE" = "TRUE" ]; then
        printf "\n"
        repo-add $workspace/$repo.db.tar.gz $workspace/$pkg-${pkgsver}-$arch.pkg.tar.gz || print_add_error $pkg
      else
        repo-add $workspace/$repo.db.tar.gz $workspace/$pkg-${pkgsver}-$arch.pkg.tar.gz &> /dev/null || print_add_error $pkg
      fi
      if [ "$ADD" = "TRUE" ]; then
        printf "${LGRE}$pkg ${YELL}$(gettext "added!") ${DEFA}\n"
      else
	printf "${LGRE}$pkg ${YELL}$(gettext "updated!") ${DEFA}\n"
      fi
    done
  elif [ "$REMOVE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ "$VERBOSE" = "TRUE" ]; then
        printf "\n"
        repo-remove $workspace/$repo.db.tar.gz $pkg || print_remove_error $pkg
      else
        repo-remove $workspace/$repo.db.tar.gz $pkg &> /dev/null || print_remove_error $pkg
      fi
      printf "${LGRE}$pkg ${YELL}$(gettext "removed!") ${DEFA}\n"
    done
  fi
}

function update_changelog()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    printf "${YELL}$(gettext "Updating:") ${LGRE}$changelog${DEFA}\n"
    rm -rf /tmp/header
    INDEX=0
    for pkg in ${pkgs[@]}; do
      echo "* `date +\"%d-%m-%Y %R\"` `whoami` $IF_REMOVE$pkg ${pkgsver[$INDEX]}" >> /tmp/header
      (( INDEX++ ))
    done
    cat /tmp/header $workspace/$changelog > /tmp/$changelog
    mv /tmp/$changelog $workspace/$changelog
  fi
}

function print_help()
{
  printf "$(gettext "A tool to manage your personal ArchLinux repository\n")"
  printf "$(gettext "Usage: repoman action [OPTIONS] packages\n")"
  printf "\n"
  printf "$(gettext "Action:\n")"
  printf "$(gettext "  -A, --add          add or update packages to repo\n")"
  printf "$(gettext "  -R, --remove       remove packages from repo\n")"
  printf "$(gettext "      --create       create database repo, then add packages\n")"
  printf "$(gettext "      --all          update the whole repository\n")"
  printf "$(gettext "Options:\n")"
  printf "$(gettext "  -l, --local        use this for local repository\n")"
  printf "$(gettext "  -k, --keep         do not get tarballs from AUR, use pkgs/\n")"
  printf "$(gettext "  -u, --noupload     do not upload any file to ftp\n")"
  printf "$(gettext "  -b, --nobuild      do not build packages if exist\n")"
  printf "$(gettext "  -c, --nochangelog  do not use a changelog file\n")"
  printf "$(gettext "  -e, --edit         ask for edit pkgbuild\n")"
  printf "$(gettext "  -v, --verbose      print commands output\n")"
  printf "$(gettext "      --clean        remove any files from workspace dir\n")"
  printf "$(gettext "      --nocolor      do not use any color\n")"
  printf "$(gettext "      --help         display this help and exit\n")"
}

function check_args()
{
  if [ -z "$1" ]; then
    NOCOLOR="TRUE"; 
    print_help
    exit 0
  fi
  
  while [ $# -gt 0 ]; do
    for OPTIONS in $@; do
      case $OPTIONS in
        -*) break ;;
         *) pkgs[${#pkgs[@]}]=$OPTIONS; shift;;
      esac
    done
    while getopts ":ARbcekluv:-:" ARGS; do
      case $ARGS in
        A) ADD="TRUE" ;;
        R) REMOVE="TRUE"; IF_REMOVE="(REMOVED) " ;;
        b) NOBUILD="TRUE" ;;
        c) NOCHANGELOG="TRUE" ;;
        e) EDIT="TRUE" ;;
        k) KEEP="TRUE" ;;
        l) LOCAL="TRUE" ;;
        u) NOUPLOAD="TRUE" ;;
        v) VERBOSE="TRUE" ;;
        -) case $OPTARG in
             add) ADD="TRUE" ;;
             remove) REMOVE="TRUE"; IF_REMOVE="($(gettext "REMOVED")) " ;;
             create) CREATE="TRUE"; ADD="TRUE" ;;
             all) ALL="TRUE"; ADD="TRUE" ;;
             local) LOCAL="TRUE"; NOUPLOAD="TRUE" ;;
             keep) KEEP="TRUE" ;;
             noupload) NOUPLOAD="TRUE" ;;
             nobuild) NOBUILD="TRUE" ;;
             nochangelog) NOCHANGELOG="TRUE" ;;
             edit) EDIT="TRUE" ;;
             verbose) VERBOSE="TRUE" ;;
             clean) CLEAN="TRUE" ;;
             nocolor) NOCOLOR="TRUE" ;;
             help) NOCOLOR="TRUE"; print_help; exit 0 ;;
             -*) NOCOLOR="TRUE"; print_help; exit 0 ;;
           esac ;;
        *) NOCOLOR="TRUE"; print_help; exit 0 ;;
      esac
    done
    shift
  done
  
  if [ "$CLEAN" != "TRUE" ] && [ "$ALL" != "TRUE" ]; then
    if [ "${#pkgs[@]}" -eq 0 ]; then
      NOCOLOR="TRUE"
      print_help
      exit 0
    fi
  fi
}

function edit_pkgbuild()
{
  if [ -f $workspace/pkgs/$1/PKGBUILD ]; then
    printf "${BOLD}$(gettext "Do you want to edit this PKGBUILD? (y/N):")${DEFA} "
    read EDIT_ANSWER
    if [ "$EDIT_ANSWER" = "$(gettext "y")" ]; then
      [ -z "$EDITOR" ] && EDITOR=vi
      $EDITOR $workspace/pkgs/$1/PKGBUILD
    fi
  fi
}

function download_files()
{
  printf "${YELL}$(gettext "Downloading:") "
  if [ "$CREATE" != "TRUE" ]; then
    if [ "$LOCAL" != "TRUE" ]; then
      if [ "$NOCHANGELOG" != "TRUE" ]; then
        get_file $changelog
      fi
    get_file $repo.db.tar.gz
    fi
  fi
  if [ "$ADD" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ ! -f $workspace/pkgs/$pkg.tar.gz ] || [ ! "$KEEP" = "TRUE" ]; then
        rm $workspace/pkgs/$pkg.tar.gz &> /dev/null
        get_pkg $pkg
      else
        printf "${LGRE} $pkg ${YELL}$(gettext "(found in pkgs/)\n")${DEFA}"
      fi
    done
  fi
}

function print_pkgs_list()
{
  printf "${YELL}$(gettext "Packages: ")"
  for pkg in ${pkgs[@]}; do
    printf "${LGRE}$pkg "
  done
  printf "\n"
}

function ask_remove()
{
  printf "${BOLD}$(gettext "Do you want to remove package build dir? (y/N):") ${DEFA}"
  read DIR_REMOVE
  if [ "$DIR_REMOVE" = "y" ]; then
    for pkg in ${pkgs[@]}; do
      rm -rf $workspace/pkgs/$pkg/
    done
  fi
}

function clean()
{
  rm -rf $workspace/*
  printf "${YELL}$(gettext "Any files in workspace directory have been removed!\n")${DEFA}"
}

function upload_file()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    if [ "$VERBOSE" = "TRUE" ]; then
      lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; put $workspace/$changelog; exit" || print_upload_error $changelog
    else
      lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; put $workspace/$changelog; exit" &> /dev/null || print_upload_error $changelog
    fi
    printf "${LGRE}$changelog ${YELL}$(gettext "uploaded!\n")${DEFA}"
  fi
  if [ "$VERBOSE" = "TRUE" ]; then
    lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; put $workspace/$repo.db.tar.gz; exit" || print_upload_error $repo.db.tar.gz
  else
    lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; put $workspace/$repo.db.tar.gz; exit" &> /dev/null || print_upload_error $repo.db.tar.gz
  fi
  printf "${LGRE}$repo.db.tar.gz ${YELL}$(gettext "uploaded!\n")${DEFA}"
  
  INDEX=0
  for pkg in ${pkgs[@]}; do
    if [ "$VERBOSE" = "TRUE" ]; then
      if [ "$REMOVE" = "TRUE" ]; then
	    lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; glob rm $pkg-*-*-i686.pkg.tar.gz; exit" || print_upload_error $pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz
      else
      	lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; glob rm $pkg-*-*-i686.pkg.tar.gz; put $workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz; exit" || print_upload_error $pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz
      fi
    else
      if [ "$REMOVE" = "TRUE" ]; then
	    lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; glob rm $pkg-*-*-i686.pkg.tar.gz; exit" &> /dev/null || print_upload_error $pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz
    	printf "${YELL}$(gettext "All copy of %s have been removed!\n")${DEFA}" "$pkg"
      else
      	lftp -u "$username,$password" $ftp_url$ftp_dir -e "set ftp:ssl-protect-data true; glob rm $pkg-*-*-i686.pkg.tar.gz; put $workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz; exit" &> /dev/null || print_upload_error $pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz
        printf "${LGRE}$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz ${YELL}$(gettext "uploaded!\n")${DEFA}"
      fi
      (( INDEX++ ))
    fi
  done
}

function copy_file()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    cp -f $workspace/$changelog $url/
  fi
  cp -f $workspace/$repo.db.tar.gz $url/
  
  INDEX=0
  for pkg in ${pkgs[@]}; do
    cp -f $workspace/$pkg-${pkgsver[$INDEX]}-$arch.pkg.tar.gz $url/
    (( INDEX++ ))
  done
}

function get_pkgs_list()
{
  printf "${BOLD}$(gettext "This will update the whole repository!\n")${DEFA}"
  for pkg in `pacman -Sql $repo 2> /dev/null`; do
    pkgs[${#pkgs[@]}]=$pkg
  done
  if [ "${#pkg}" -eq 0 ]; then
    printf "${LRED}$(gettext "You must enable %s repository in pacman. Exiting.\n")${DEFA}" "$repo"
    exit 1
  fi
}

function main()
{
  source /etc/repoman.conf
  if [ "$UID" -eq 0 ]; then
    USE_ROOT="--asroot "
  fi
  check_args $@
  check_files
  color
  UPDATED=0
  
  if [ "$CLEAN" = "TRUE" ]; then
    clean
    exit 0
  fi
  
  if [ "$ALL" = "TRUE" ]; then
    get_pkgs_list
  fi
  
  print_pkgs_list
  download_files
  
  if [ "$ADD" = "TRUE" ]; then
    printf "${YELL}$(gettext "Extracting:")${DEFA}"
    extract
    
    printf "${YELL}$(gettext "Getting all packages version...\n")${DEFA}"
    pkgs_version
    
    printf "${YELL}$(gettext "Building:")${DEFA}"
    build_pkg
  fi
  
  if [ $UPDATED -ne 0 ] || [ "$REMOVE" = "TRUE" ]; then
    update_db

    update_changelog
  
    if [ "$NOUPLOAD" != "TRUE" ]; then
      upload_file
    fi
  
    if [ "$LOCAL" = "TRUE" ]; then
      copy_file
    fi
  else
    printf "${YELL}$(gettext "None packages added to repository\n") ${DEFA}"
  fi
  
  if [ "$ADD" = "TRUE" ]; then
    ask_remove
  fi
}

main $@

exit 0
