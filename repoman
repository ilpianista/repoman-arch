#!/bin/bash
#
# RepoMan
# A tool for manage your ArchLinux repository
#
# Copyright (C) 2008 Andrea Scarpino <bash.lnx@gmail.com>
#                    Dario Vilardi <dax@deelab.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function environment()
{
  source /etc/repoman.conf
  check_dir
}

function color()
{
  if [ "$NOCOLOR" != "TRUE" ]; then
    DEFA="\033[1;0m"
    BOLD="\033[1;1m"
    LRED="\033[1;31m"
    LGRE="\033[1;32m"
    YELL="\033[1;33m"
  else
    NOCOLOR_FLAG="--nocolor"
  fi
}

function print_wget_error()
{
  printf "\n${LRED}I can't get $1. Exiting. ${DEFA}\n"
  exit 1
}

function print_tar_error()
{
  printf "\n${LRED}I can't extract $1. Exiting. ${DEFA}\n"
  exit 1
}

function print_makepkg_error()
{
  printf "\n${LRED}$1: Makepkg fail. Exiting. ${DEFA}\n"
  exit 1
}

function get_file()
{
  printf "${LGRE} $1 ${DEFA}"
  mv $workspace/$1 $workspace/$1.old &> /dev/null
  if [ "$VERBOSE" = "TRUE" ]; then
    wget -P $workspace $url/$1 || print_wget_error $1
  else
    wget -P $workspace $url/$1 &> /dev/null || print_wget_error $1
  fi
}

function get_pkg()
{
  printf "${LGRE} $1.tar.gz ${DEFA}"
  if [ "$VERBOSE" = "TRUE" ]; then
    wget -P $workspace/pkgs http://aur.archlinux.org/packages/$1/$1.tar.gz || print_wget_error $1
  else
    wget -P $workspace/pkgs http://aur.archlinux.org/packages/$1/$1.tar.gz &> /dev/null || print_wget_error $1
  fi
}

function extract()
{
  printf "${LGRE}$1 ${DEFA}"
  rm -rf $workspace/pkgs/$1
  tar -xf $workspace/pkgs/$1.tar.gz -C $workspace/pkgs || print_tar_error $1

}

function check_dir()
{
  if [ ! -d $workspace ]; then
    mkdir $workspace
  fi
  
  if [ ! -d $workspace/pkgs ]; then
    mkdir $workspace/pkgs
  fi
}

function build_pkg()
{
  printf "${LGRE} $1"
  cd $workspace/pkgs/$1
  if [ "$VERBOSE" = "TRUE" ]; then
    makepkg -f --noconfirm $NOCOLOR_FLAG || print_makepkg_error $1
  else
    makepkg -f --noconfirm $NOCOLOR_FLAG &> /dev/null || print_makepkg_error $1
  fi
  lpkgver=`cat PKGBUILD | grep pkgver= | awk -F'=' '{print $2}'`
  lpkgrel=`cat PKGBUILD | grep pkgrel= | awk -F'=' '{print $2}'`
  pkgsver[${#pkgsver[@]}]=$lpkgver-$lpkgrel
  printf " ($lpkgver-$lpkgrel)${DEFA}\n"
  cp $workspace/pkgs/$1/$1-$lpkgver-$lpkgrel-$arch.pkg.tar.gz $workspace/ || exit 1
}

function update_db()
{
  printf "${YELL}Updating: ${LGRE}$repo.db.tar.gz${DEFA}\n"
  if [ "$ADD" = "TRUE" ] || [ "$UPDATE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ "$VERBOSE" = "TRUE" ]; then
        repo-add $workspace/$repo.db.tar.gz $workspace/$pkg-${pkgsver}-$arch.pkg.tar.gz || exit 1
      else
        repo-add $workspace/$repo.db.tar.gz $workspace/$pkg-${pkgsver}-$arch.pkg.tar.gz &> /dev/null || exit 1
      fi
      if [ "$ADD" = "TRUE" ]; then
        printf "${LGRE}$pkg ${YELL}added! ${DEFA}\n"
      else
	printf "${LGRE}$pkg ${YELL}updated! ${DEFA}\n"
      fi
    done
  elif [ "$REMOVE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ "$VERBOSE" = "TRUE" ]; then
        repo-remove $workspace/$repo.db.tar.gz $pkg || exit 1
      else
        repo-remove $workspace/$repo.db.tar.gz $pkg &> /dev/null || exit 1
      fi
      printf "${LGRE}$pkg ${YELL}removed! ${DEFA}\n"
    done
  fi
}

function update_changelog()
{
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    printf "${YELL}Updating: ${LGRE}$changelog${DEFA}\n"
    i=0
    for pkg in ${pkgs[@]}; do
      echo "* `date +\"%d-%m-%Y %R\"` `whoami` -$flag $pkg ${pkgsver[$i]}" >> /tmp/header
      let i=$i+1
    done
    cat /tmp/header $workspace/$changelog > /tmp/$changelog
    mv /tmp/$changelog $workspace/$changelog
  fi
}

function print_help()
{
  printf "A tool for manage your personal ArchLinux repository\n"
  printf "\n"
  printf "Usage: `basename $0` action [OPTIONS] packages\n"
  printf "Action:\n"
  printf "  -A, --add          add packages to repo\n"
  printf "  -R, --remove       remove packages from repo\n"
  printf "  -U, --update       update packages to repo\n"
  printf "Options:\n"
  printf "      --help         display this help and exit\n"
  printf "      --verbose      print makepkg output\n"
  printf "      --nocolor      do not use any color\n"
  printf "      --nochangelog  do not use a changelog file\n"
  printf "      --edit         ask for edit pkgbuild\n"
}

function check_args()
{
  if [ -z "$1" ]; then
    NOCOLOR="TRUE"; 
    print_help
    exit 0
  fi
  
  while [ $# -gt 0 ]; do
    for OPTIONS in $@; do
      case $OPTIONS in
        -*) break ;;
         *) pkgs[${#pkgs[@]}]=$OPTIONS; shift;;
      esac
    done
    while getopts ":ARU:-:" ARGS; do
      case $ARGS in
        A) ADD="TRUE"; flag="A" ;;
        R) REMOVE="TRUE"; flag="R" ;;
        U) UPDATE="TRUE"; flag="U" ;;
        -) case $OPTARG in
             add) ADD="TRUE"; flag="A" ;;
             remove) REMOVE="TRUE"; flag="R" ;;
             update) UPDATE="TRUE"; flag="U" ;;
             help) NOCOLOR="TRUE"; print_help; exit 0 ;;
             verbose) VERBOSE="TRUE" ;;
             nocolor) NOCOLOR="TRUE" ;;
             nochangelog) NOCHANGELOG="TRUE" ;;
             edit) EDIT="TRUE" ;;
             -*) NOCOLOR="TRUE"; print_help; exit 0 ;;
           esac ;;
        *) NOCOLOR="TRUE"; print_help; exit 0 ;;
      esac
    done
    shift
  done
  
  if [ ${#pkgs[@]} -eq 0 ]; then
    NOCOLOR="TRUE"
    print_help
    exit 0
  fi
}

function edit_pkgbuild()
{
  if [ -f $workspace/pkgs/$1/PKGBUILD ]; then
    printf "${BOLD}Do you want to edit this PKGBUILD? (y/N):${DEFA} "
    read EDIT_ANSWER
    if [ "$EDIT_ANSWER" = "y" ]; then
      [ -z "$EDITOR" ] && EDITOR=vi
      $EDITOR $workspace/pkgs/$1/PKGBUILD
    fi
  fi
}

function download_repo_file()
{
  printf "${YELL}Downloading: "
  if [ "$NOCHANGELOG" != "TRUE" ]; then
    get_file $changelog
  fi
  get_file $repo.db.tar.gz
  if [ "$ADD" = "TRUE" ] || [ "$UPDATE" = "TRUE" ]; then
    for pkg in ${pkgs[@]}; do
      if [ ! -f $workspace/pkgs/$pkg.tar.gz ]; then
        get_pkg $pkg
      fi
    done
  fi
  printf "\n"
}

function print_pkgs_list()
{
  printf "${YELL}Packages: "
  for pkg in ${pkgs[@]}; do
    printf "${LGRE}$pkg "
  done
  printf "\n"
}

function main()
{
  environment
  check_args $@
  color
  
  print_pkgs_list
  download_repo_file
  
  if [ "$ADD" = "TRUE" ] || [ "$UPDATE" = "TRUE" ]; then
    printf "${YELL}Extracting: "
    for pkg in ${pkgs[@]}; do
      extract $pkg
      printf "\n"
      if [ "$EDIT" = "TRUE" ]; then
        edit_pkgbuild $pkg
      fi
    done
    
    printf "${YELL}Building: "
    for pkg in ${pkgs[@]}; do
      build_pkg $pkg
    done
  fi
  
  update_db

  update_changelog
}

main $@

exit 0
